srcs/main/main.c:15:/*void time_exe(const char* s, clock_t *t)
srcs/main/main.c:18:	printf(_CYAN "%s took %f seconds to execute \n" _RESET, s, ((double)*t)/CLOCKS_PER_SEC);
srcs/main/main.c:28:	time_exe(__func__, cl(clock()));
srcs/main/main.c:31:		printf("error\n");
srcs/main/main.c:46:	time_exe(__func__, cl(clock()));
srcs/read/read_check.c:17:	time_exe(__func__, cl(clock()));
srcs/read/read_check.c:40://	printf("Piece %s create\n", tetro->name);
srcs/read/read_check.c:46:	time_exe(__func__, cl(clock()));
srcs/read/read_check.c:53://		printf("one turn \n");
srcs/read/read_check.c:81://	printf("OUT OF WHILE\n");
srcs/read/read_check.c:87:	time_exe(__func__, cl(clock()));
srcs/read/read_check.c:94://	printf("mdr\n");
srcs/read/read_check.c:97://	printf("lol\n");
srcs/read/read_check.c:102://	printf("weird\n");
srcs/read/read_check.c:105://		printf("pbm\n");
srcs/read/read_check.c:106://	printf(_YELLOW "FT_READ RETURN 0\n" _RESET);
srcs/read/recognize.c:37://			printf("1\n");
srcs/read/recognize.c:49://			printf("%s\n",s );
srcs/read/recognize.c:50://				printf("2 %d |%c%c%c%c|\n", div, s[i], s[i + (5 * 1)], s[i + (5 * 2)], s[i + (5 * 3)]);
srcs/read/recognize.c:57://					printf("3\n");
srcs/read/recognize.c:70://	printf("0\n");
srcs/read/recognize.c:99:	time_exe(__func__, cl(clock()));
srcs/read/recognize.c:111://	printf(_RED "RECOGNIZE: %d\n", i);
srcs/setup/setup.c:17:	time_exe(__func__, cl(clock()));
srcs/setup/setup.c:72:	time_exe(__func__, cl(clock()));
srcs/setup/setup.c:79:		//printf("WESH\n");
srcs/setup/setup.c:87:		//printf("HELLO\n");
srcs/setup/setup.c:91:		//printf("\nPIECE : %d\npc_pos %d\ntt_pos %d\ntt_pos_all%d\n", i, find_piece(head, i)->pc_pos, find_piece(head, i)->tt_pos, head->tt_pos_all);
srcs/setup/setup.c:97:	time_exe(__func__, cl(clock()));
srcs/setup/setup.c:103:	//printf("1\n%d\n", head->tt_pos_all);
srcs/setup/setup.c:110:		//printf("%d\n", i);
srcs/setup/setup.c:122:	time_exe(__func__, cl(clock()));
srcs/setup/setup.c:123://	printf("%s\n", __func__);
srcs/setup/setup.c:145:	time_exe(__func__, cl(clock()));
srcs/setup/setup.c:146:	//printf("Nb of pieces = %d\n", head->p);
srcs/setup/setup.c:148:	//printf("size_square = %d\n", head->size_square);
srcs/setup/setup.c:152://	time_exe(__func__, clock());
srcs/setup/setup_pieces.c:17:	time_exe(__func__, cl(clock()));
srcs/setup/setup_pieces.c:24:	time_exe(__func__, cl(clock()));
srcs/setup/setup_pieces.c:35:	time_exe(__func__, cl(clock()));
srcs/setup/setup_pieces.c:63:	time_exe(__func__, cl(clock()));
srcs/solve/solve.c:17:	time_exe(__func__, cl(clock()));
srcs/solve/solve.c:52:	time_exe(__func__, cl(clock()));
srcs/solve/solve.c:73:	time_exe(__func__, cl(clock()));
srcs/solve/solve.c:83:	time_exe(__func__, cl(clock()));
srcs/solve/solve.c:90:		printf("\n\n\n\n\n\n\n\n\n\n");
srcs/solve/solve.c:93:		printf("%d %d/%d\n", i, find_sol(head, i)->current_path, find_sol(head, i)->nb_of_paths);
srcs/solve/solve.c:98:	time_exe(__func__, cl(clock()));
srcs/solve/solve.c:102://	printf("\n\ndeepness %d\n", deepness);
srcs/solve/solve.c:110://			printf("%d %d/%d\n", deepness, find_sol(head, deepness)->current_path, find_sol(head, deepness)->nb_of_paths);
srcs/solve/solve.c:116://			printf("deleter done\n");
srcs/solve/solve.c:118://			printf("ALMOST DONE %d/%d\n", deepness, head->p);
srcs/solve/binary.c:17:	time_exe(__func__, cl(clock()));
srcs/solve/binary.c:28:			time_exe(__func__, cl(clock()));
srcs/solve/binary.c:37:				time_exe(__func__, cl(clock()));
srcs/solve/binary.c:46:	time_exe(__func__, cl(clock()));
srcs/solve/binary.c:62:	time_exe(__func__, cl(clock()));
srcs/solve/binary.c:80:	time_exe(__func__, cl(clock()));
srcs/solve/binary.c:95:	time_exe(__func__, cl(clock()));
srcs/solve/binary.c:100://	printf("\n");
srcs/solve/binary.c:103://	printf("\n%d\t[%d]\t[%d]\t\tone: %d\tbinary: %d\n", binary_position, binary_position / 8, binary_position % 8, one, binary[binary_size(binary_position)]);
srcs/solve/binary.c:105://	printf("\n\n");
srcs/solve/binary.c:110:	time_exe(__func__, cl(clock()));
srcs/solve/binary.c:145:	time_exe(__func__, cl(clock()));
srcs/solve/binary.c:151:	time_exe(__func__, cl(clock()));
srcs/solve/binary.c:157:	//printf("1\n%d\n", head->tt_pos_all);
srcs/print/print_debug.c:17:	time_exe(__func__, cl(clock()));
srcs/print/print_debug.c:22:	printf(_GREEN"~~~~~~~~~~~~~~~~~YX_TO_J~~~~~~~~~~~~~~~~~\n");
srcs/print/print_debug.c:27:			printf(_GREEN "%d\t", yx_to_j(y, x));
srcs/print/print_debug.c:28:		printf("\n" _RESET);
srcs/print/print_debug.c:30:	printf("\n");
srcs/print/print_debug.c:35:	time_exe(__func__, cl(clock()));
srcs/print/print_debug.c:36:	printf(_RESET"Tetro n*%d" _YELLOW"\tname:\t%s\t\t[%d;%d]->%d\n", piece->i, (char*)piece->name, piece->coord[0]->y, piece->coord[0]->x, piece->coord[0]->j);
srcs/print/print_debug.c:37:	printf("\t\t\tLetter:\t%c\t\t[%d;%d]->%d\n", piece->letter, piece->coord[1]->y, piece->coord[1]->x, piece->coord[1]->j);
srcs/print/print_debug.c:38:	printf("\t\t\tY_size:\t%d\t\t[%d;%d]->%d\n", piece->y_size, piece->coord[2]->y, piece->coord[2]->x, piece->coord[2]->j);
srcs/print/print_debug.c:39:	printf("\t\t\tX_size:\t%d\t\t[%d;%d]->%d\n", piece->x_size, piece->coord[3]->y, piece->coord[3]->x, piece->coord[3]->j);
srcs/print/print_debug.c:40:	//printf("\t\t\ti:\t%d\n", piece->i);
srcs/print/print_debug.c:41:	printf("\t\t_____\n");
srcs/print/print_debug.c:42:	printf("\t\tNb of placement:\t\t%d\n", piece->pc_pos);
srcs/print/print_debug.c:43:	printf("\t\tSum until now of placements:\t%d\n", piece->tt_pos);
srcs/print/print_debug.c:44:	printf(_RESET "---------\n\n");
srcs/print/print_debug.c:45:	//printf("\t:\t%d\n", piece->);
srcs/print/print_debug.c:50:	time_exe(__func__, cl(clock()));
srcs/print/print_debug.c:69:	time_exe(__func__, cl(clock()));
srcs/print/print_debug.c:101:	time_exe(__func__, cl(clock()));
srcs/print/print_debug.c:124:				//printf("%d|", i);
srcs/print/print_debug.c:161:	time_exe(__func__, cl(clock()));
srcs/print/print_debug.c:171:		//printf("%d|", i);
srcs/print/print_debug.c:195:		//printf("%d\t: %s\n", i, head->solution[i]);
srcs/print/print_debug.c:200:	time_exe(__func__, cl(clock()));
srcs/print/print_debug.c:201:	printf(_RED "\nSTRUCT HEAD\n");
srcs/print/print_debug.c:202:	printf("\tSize square:\t\t%d -> %d\t\t(%d)\n", head->size_square, head->size_square * head->size_square, head->size_square * head->size_square + head->p);
srcs/print/print_debug.c:203:	printf("\tNb of pieces:\t\t%d\n", head->p);
srcs/print/print_debug.c:204:	printf("\tSum of all PxNx:\t%d\n", head->tt_pos_all);
srcs/print/print_debug.c:205:	//printf("\tPossible soltions: %d\n", head->possible_solutions);
srcs/print/print_debug.c:206:	printf("\tThe choosen config:\t%d\n", head->the_choosen_configuration);
srcs/print/print_debug.c:207:	//printf("\t: %d\n", head->);
srcs/print/print_debug.c:208:	printf("\n\n\n");
srcs/print/print_debug.c:213:	time_exe(__func__, cl(clock()));
srcs/print/print_debug.c:214:	printf(_GREEN "\n####################### <PRINT DEBUG> #######################\n" _RESET);
srcs/print/print_debug.c:218:	printf(_GREEN "####################### <\\PRINT DEBUG> ######################\n\n" _RESET);
srcs/print/printing_the_result.c:17:	time_exe(__func__, cl(clock()));
srcs/print/printing_the_result.c:43:	time_exe(__func__, cl(clock()));
srcs/print/printing_the_result.c:47:	//printf("Print Pieces\n");
srcs/print/printing_the_result.c:62:	//printf("End of print color\n");
srcs/print/printing_the_result.c:94:	time_exe(__func__, cl(clock()));
srcs/print/printing_the_result.c:102://	printf("Show pieces\n");
srcs/print/printing_the_result.c:105://		printf("BIG %d<%d && j_piece < head->p\n", line, head->tt_pos_all, j_piece, head->p);
srcs/print/printing_the_result.c:108://		printf("\t%d\n", line);
srcs/print/printing_the_result.c:113://			printf("\t\tBlock[%d]=%d\n", i, block);
srcs/print/printing_the_result.c:120://	printf("Finish\n");
srcs/print/printing_the_result.c:121:	print_time(time_exe(__func__, cl(clock())));
srcs/print/printing_the_result.c:127:	time_exe(__func__, cl(clock()));
srcs/print/printing_the_result.c:133:	//printf(_GREEN "Show Pieces\n");
srcs/print/printing_the_result.c:138://		//printf("\tBig While\n");
srcs/print/printing_the_result.c:141:		//printf("\tSolution line %d found\n", line);
srcs/print/printing_the_result.c:144:		//printf("\tPiece %d has been identified!\n", j_piece);
srcs/print/printing_the_result.c:149://			//printf("\t\tWhile block\n");
srcs/print/printing_the_result.c:152:			//printf("\t\tNow on block % d\n", block);
srcs/print/printing_the_result.c:155:				//printf("\t\t\tLetter %c | y:%d\tx:%d\t| j:%d\n",find_piece(head, j_piece + 1)->letter, j_to_yx(head, block, 0), j_to_yx(head, block, 1), block);
srcs/print/printing_the_result.c:156:				//printf("\t\t\t\tWrite pbm ?\n");
srcs/print/printing_the_result.c:159:				//printf("\t\t\t\tNop.\n");
srcs/print/printing_the_result.c:161://			//printf("\t\tLETTER WRITEN\n");
srcs/print/printing_the_result.c:168:	//printf("End of putting pieces in print\n");
srcs/print/printing_the_result.c:174:	time_exe(__func__, cl(clock()));
srcs/print/printing_the_result.c:189:	time_exe(__func__, cl(clock()));
srcs/print/printing_the_result.c:193://	//printf("Print Result\n");
srcs/print/printing_the_result.c:204:	//printf("tab_result[%d][%d + 1] created !\n", head->size_square, head->size_square);
srcs/free/free_all.c:19://	printf("update_pieces\n");
srcs/free/free_all.c:34://	printf("free_linkedsol\n");
srcs/free/free_all.c:48://	printf("free_solsol\n");
srcs/free/free_all.c:67://	printf("restart_and_grow\n");
srcs/free/free_all.c:69://	printf("FREE DONE !\n");
srcs/logistics/float_to_int.c:17:	time_exe(__func__, cl(clock()));
srcs/logistics/float_to_int.c:23:	time_exe(__func__, cl(clock()));
srcs/logistics/float_to_int.c:35:	time_exe(__func__, cl(clock()));
srcs/logistics/float_to_int.c:45:	time_exe(__func__, cl(clock()));
srcs/logistics/float_to_int.c:69:	time_exe(__func__, cl(clock()));
srcs/logistics/float_to_int.c:77:	time_exe(__func__, cl(clock()));
srcs/logistics/list_func.c:17:	time_exe(__func__, cl(clock()));
srcs/logistics/list_func.c:22://	printf("Next solve step\n");
srcs/logistics/list_func.c:30:	//	printf("First link of solve created\n");
srcs/logistics/list_func.c:43://		printf("Last link of solve created\n");
srcs/logistics/list_func.c:50:	time_exe(__func__, cl(clock()));
srcs/logistics/list_func.c:56:		printf("Piece <= 0\n");
srcs/logistics/list_func.c:65:			printf("\t\t\tPiece %d does not exist !\n", piece);
srcs/logistics/list_func.c:70:	//printf("\t\t\tPiece %d found !\n", piece);
srcs/logistics/list_func.c:76:	time_exe(__func__, cl(clock()));
srcs/logistics/list_func.c:86:			printf("\t\t\tSol %d does not exist !\n", sol);
srcs/logistics/list_func.c:96:	time_exe(__func__, cl(clock()));
srcs/logistics/list_func.c:113:	time_exe(__func__, cl(clock()));
